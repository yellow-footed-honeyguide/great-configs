# User Information
[user]
    email = ""
    name = ""

# URL Rewrite for "your company" Git
[url ""]
    insteadof = ""

# Color Settings
[color]
    ui = true                    # Enable colorized output for all Git commands

# Diff Highlight Colors
[color "diff-highlight"]
    oldNormal = red bold         # unchanged parts of old lines
    oldHighlight = red bold 52   # removed parts of modified lines
    newNormal = green bold       # unchanged parts of new lines
    newHighlight = green bold 22 # added parts of modified lines

# Diff Colors
[color "diff"]
    meta = 11
    frag = magenta bold
    func = 146 bold
    commit = yellow bold
    old = red bold
    new = green bold
    whitespace = red reverse

# Pager Settings
[pager]
    # Use diff-so-fancy for diff and show commands
    diff = diff-so-fancy | less --tabs=4 -RFX
    show = diff-so-fancy | less --tabs=4 -RFX

# Useful Aliases
[alias]
    # Compact status output
    s = status -s

    # Quick add and commit
    a = "!f() { git add . && git commit -m \"$1\"; }; f"

    # Quick add, commit, and push to main
    ap = "!f() { git add . && git commit -m \"$1\" && git push origin main; }; f"

    # Compact and colorful log output
    l = log --graph --format='format:%C(yellow)%h%C(reset) %s %C(magenta)%cr%C(reset)%C(auto)%d%C(reset)'


[alias]
    # Use batcat for showing files with syntax highlighting
    # Note: Requires batcat to be installed
    show-file = "!f() { git show \"$1\" | batcat -l c --theme=\"ansi\"; }; f"

[alias]
    # Search for a pattern across all commits in the repository
    # Usage: git grep-all <pattern>
    # Example: git grep-all "TODO"
    grep-all = "!f() { \
        git grep \"$1\" $(git rev-list --all) | \
        awk -F: '{ \
            printf \"%-4s %-12s %3d: %s\\n\", substr($1,1,4), $2, NR, $3 \
        }'; \
    }; f"

[alias]
    # Remote Diff (rdiff): Compare local changes with the remote branch
    #
    # Usage: git rdiff [branch_name]
    #
    # If no branch name is provided, it compares with the current branch.
    # This alias fetches the latest changes and shows a colorized, formatted diff.
    #
    # Example: git rdiff feature-branch
    #
    # Note: Requires diff-so-fancy to be installed

    rdiff = "!f() { \
        set -e; \
        \
        get_current_branch() { \
            git rev-parse --abbrev-ref HEAD; \
        }; \
        \
        check_remote_branch_exists() { \
            git ls-remote --exit-code --heads origin \"$1\" >/dev/null 2>&1; \
        }; \
        \
        show_diff() { \
            git fetch && \
            git diff --color=always --exit-code \"origin/$1\" | \
            diff-so-fancy | \
            less --tabs=4 -RFX; \
        }; \
        \
        print_error() { \
            echo \"Error: Remote branch 'origin/$1' does not exist.\"; \
            echo \"Current local branch: $2\"; \
            echo \"Usage: git rdiff [branch_name]\"; \
        }; \
        \
        main() { \
            local current_branch=$(get_current_branch); \
            local compare_branch=${1:-$current_branch}; \
            \
            if check_remote_branch_exists \"$compare_branch\"; then \
                show_diff \"$compare_branch\"; \
            else \
                print_error \"$compare_branch\" \"$current_branch\"; \
                return 1; \
            fi; \
        }; \
        \
        main \"$@\"; \
    }; f"


[alias]
    # Custom branch display with sorting and formatting
    b = !git branch --sort=-committerdate --format='\
%(if:equals=*)%(HEAD)%(then)%(color:green)*%(else) %(end)\
%(color:cyan)%(align:15,left)%(refname:short)%(end) \
%(color:yellow)%(committerdate:relative)%(color:reset) \
%(if)%(worktreepath)%(then)%(color:magenta)[WT]%(color:reset)%(end) \
%(if)%(upstream)%(then)%(color:blue)[%(upstream:short)]%(color:reset)%(end)'
