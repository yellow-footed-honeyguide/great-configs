"
"    __                                
"   (  )                               
" \ _\/_,'    HONEYGUIDE VIM CONFIG    
"--("))))))= -.._.-'-.._.-'-.._.-'-.._.
"     \\   
"
"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Keys
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"disable arrow keys in normal mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

"disable arrow keys in insert mode
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

"enter insert mode
:noremap j i

"enter command mode
:noremap l :

"move one line up and enter command mode
:noremap o :up<enter>

"move to the end of the file
:noremap <Space> G

"move down one line
:noremap g j

"move up one line
:noremap h k

"move down 10 lines
:noremap t 10j

"move up 10 lines
:noremap y 10k

"move to the beginning of the line
:noremap K ^

"move to the matching bracket
:noremap } %

"open a new line below the current one
:noremap n o

"open a new line above the current one
:nnoremap u O

"move to the end of the line and enter ins mode
:noremap n A

"move left one character
:noremap <C-a> h

"move right one character
:noremap <C-s> l

" move to the next occurrence of a character
nnoremap d f

" move to the previous occurrence of a character
nnoremap k F

" repeat the last 'f', 't', 'F' or 'T' command
nnoremap s ;

"remove current character, enter ins mode
:noremap f s

"delete the current line
:noremap c dd

"remove current word, enter ins mode
:noremap v ciw

"delete up to a specific character
:noremap e dt

"delete from the cursor to the end of the line
:noremap E D

"delete the last line and move to the previous position
:noremap <F1> Gdd<C-o>

"delete everything, enter ins mode
:noremap x ggVGc

"undo
:nnoremap , u

"redo
:nnoremap . <C-R>

"yank the current line
:noremap : y

"duplicate the current line
:noremap i yyp

"move to the beginning of the file
:noremap q gg

"center the view on the cursor
:noremap b zz

"move to the end of the file and center the view on the cursor
:noremap z Gzz

"turn off search highlighting
:noremap ] :nohlsearch<enter>

"find the next occurrence
:noremap ' n

"find the previous occurrence
:noremap [ N

" set a mark and yank the current line
nnoremap V my

"enter visual mode
:noremap a v

"start a substitution command
:noremap S :%s/

"jump to last changed line
:noremap J '.

"start a search
nnoremap ; /

"delete from the current line to the end of the file
:noremap C :.,$d<enter>

"delete from the cursor to the beginning of the line
":noremap R d^

"start a substitution command for the entire file
:noremap R :%s/

"show the full path of the current file
:noremap ` :echo expand('%:p')<enter>

"turn on syntax highlighting
:noremap * :syntax on<enter>

"turn off syntax highlighting
:noremap $ :syntax off<enter>

"display the current file encoding
:noremap <F3> :set fileencoding<enter>

"reopen the current file with a specific encoding
:noremap <F4> :e ++enc=cp1251<enter>

"toggle line numbers
:noremap w :set invnumber<enter>:echo <enter>

"insert a new line below the current line
:noremap m :call append(line('.'), '')<enter>:+<enter>:echo <enter>

"turn off search highlighting
:noremap { :nohlsearch<enter>

"trigger keyword completion in insert mode
:inoremap <tab> <C-p>

"paste
:noremap r p

"set mark
nnoremap V mV

"jump to mark
nnoremap N `V

"jump to end of line
nnoremap D $ 



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"enable line numbers
set number

"enable search highlighting
set hlsearch

"disable creation of backup files
set nobackup

"set tab width to 2 spaces
set tabstop=2

"disable creation of swap files
set noswapfile

"use current directory for file name completion
set complete=.

"disable showing matching brackets
set noshowmatch

"shorten various messages
set shortmess=A

"disable writing backup files
set nowritebackup

"timeout for key codes and mappings
set timeout timeoutlen=10 ttimeoutlen=10

"disable loading of netrw plugin
let g:loaded_netrw = 1
let g:loaded_netrwPlugin = 1

"set default color scheme
colorscheme default

"enable syntax highlighting
syntax on

"color for line numbers
highlight LineNr ctermfg=3

"font and background color for search occurrences
highlight Search ctermfg=black ctermbg=green

"background color for popup menu
highlight Pmenu ctermbg=blue guibg=gray

"background color for selected item in popup menu
highlight PmenuSel ctermbg=208 guibg=#FF8C00

highlight MatchParen ctermbg=none ctermfg=blue


" Force syntax highlighting for vim and zsh config files
autocmd BufEnter .vimrc,.vim,.zshrc,.zsh syntax on



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Toggle comment with '!' at the beginning of the line
function! CommentExclam()
    let l:line = getline('.')
    if l:line =~ '^\s*!'
        execute 's/^\s*!//'
    else
        execute 's/^/!/'
    endif
endfunction

" Toggle comment with '#' at the beginning of the line
function! CommentHash()
    let l:line = getline('.')
    if l:line =~ '^\s*#'
        execute 's/^\s*#//'
    else
        execute 's/^/#/'
    endif
endfunction

" Toggle comment with '"' at the beginning of the line
function! CommentDoubleQuote()
    let l:line = getline('.')
    if l:line =~ '^\s*"'
        execute 's/^\s*"//'
    else
        execute 's/^/"//'
    endif
endfunction

" Toggle comment with '//' at the beginning of the line, preserving indentation
function! CommentDoubleSlash()
    let l:line = getline('.')
    if l:line =~ '^\s*//'
        execute 's:^\(\s*\)//:\1:'
    else
        execute 's:^\(\s*\):\1// :'
    endif
endfunction

" Copy to both clipboard and primary buffer
function! CopyToBothBuffers()
    let l:content = @"
    call system('wl-copy', l:content)
    call system('wl-copy -p', l:content)
    echo "Copied to clipboard and primary"
endfunction

" Format code using clang-format and move to next paragraph
function! FormatAndNewLine()
    let l:winview = winsaveview()
    silent! execute '%!clang-format'
    call winrestview(l:winview)
endfunction

" Key mappings
nnoremap I :call CommentHash()<CR>
nnoremap : yy:call CopyToBothBuffers()<CR>
nnoremap <C-w> l
nnoremap / %
nnoremap O :call FormatAndNewLine()<CR>

" File-specific settings
augroup FileTypeSpecific
    autocmd!
    autocmd BufWinEnter *.php,*.c,*.cpp :noremap I :call CommentDoubleSlash()<CR>
    autocmd BufWinEnter *.vimrc :noremap I :call CommentDoubleQuote()<CR>
    autocmd BufWinEnter *.Xresources :noremap I :call CommentExclam()<CR>
    autocmd BufWinEnter *.vimrc,*.zshrc setlocal syntax=OFF
augroup END



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Auto-formatter for C-family languages
call plug#begin()
Plug 'rhysd/vim-clang-format'
call plug#end()

" Set tag files location: current dir, then up to $HOME
set tags=./tags,tags;$HOME 
  
" Jump to tag definition
nnoremap G <C-]>

" Jump back from definition
nnoremap H <C-t>
